{"version":3,"sources":["actions/listsActions.js","actions/cardsActions.js","actions/index.js","reducers/listsReducer.js","reducers/index.js","store/index.js","components/TrelloCard.js","components/TrelloActionButton.js","components/TrelloList.js","components/App.js","serviceWorker.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggebleId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","cardID","initialState","id","cards","listsReducer","state","action","newList","newCard","newState","map","list","draggableId","splice","find","card","listStart","listEnd","combineReducers","lists","listReducer","store","createStore","rootReducer","TrelloCard","index","String","provided","class","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","TrelloActionButton","formOpen","openForm","setState","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","props","handleAddCard","renderAddButton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","backgroundColor","Icon","renderForm","placeholder","buttonTitle","marginLeft","overflow","minHeight","minWidth","padding","marginTop","autoFocus","onBlur","onChange","resize","width","outline","border","formButtonGroup","Button","onMouseDown","variant","cursor","this","React","Component","display","alignItems","borderRadius","height","connect","TrelloList","droppableId","droppableProps","key","App","onDragEnd","result","destination","source","className","direction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f5bc186.chunk.js","sourcesContent":["import { CONSTANTS } from \"../actions\";\n\nexport const addList = title => {\n    return {\n        type: CONSTANTS.ADD_LIST,\n        payload: title\n    };\n};\n\nexport const sort = (\n    droppableIdStart,\n    droppableIdEnd,\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggebleId,\n    type\n) => {\n    return {\n        type: CONSTANTS.DRAG_HAPPENED,\n        payload: {\n            droppableIdStart,\n            droppableIdEnd,\n            droppableIndexStart,\n            droppableIndexEnd,\n            draggebleId,\n            type\n        }\n    }\n}","import { CONSTANTS } from \"../actions\";\n\nexport const addCard = (listID, text) => {\n    return {\n        type: CONSTANTS.ADD_CARD,\n        payload: {text, listID}\n    };\n};","export * from \"./listsActions\";\nexport * from \"./cardsActions\";\n\n\nexport const CONSTANTS = {\n    ADD_CARD: \"ADD_CARD\",\n    ADD_LIST: \"ADD_LIST\",\n    DRAG_HAPPENED: \"DRAG_HAPPENED\"\n};","import { CONSTANTS } from \"../actions\";\n\nlet listID = 4;\nlet cardID = 0;\n\nconst initialState = [\n    {\n        title: \"Backlog\",\n        id: `list-${0}`,\n        cards: []\n    },\n    {\n        title: \"Ready\",\n        id: `list-${1}`,\n        cards: []\n    },\n    {\n        title: \"In progress\",\n        id: `list-${2}`,\n        cards: []\n    },\n    {\n        title: \"Finished\",\n        id: `list-${3}`,\n        cards: []\n    }\n];\n\nconst listsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                cards: [],\n                id: `list-${listID}`\n            }\n            listID += 1;\n            return [...state, newList];\n        case CONSTANTS.ADD_CARD: {\n            const newCard = {\n                text: action.payload.text,\n                id: `card-${cardID}`\n            }\n            cardID += 1;\n\n            const newState = state.map(list => {\n                if (list.id === action.payload.listID) {\n                    return {\n                        ...list,\n                        cards: [...list.cards, newCard]\n                    }\n                } else {\n                    return list;\n                }\n            });\n\n            return newState;\n        }\n        case CONSTANTS.DRAG_HAPPENED:\n            const {\n                droppableIdStart,\n                droppableIdEnd,\n                droppableIndexStart,\n                droppableIndexEnd,\n                draggableId,\n                type\n            } = action.payload;\n            const newState = [...state];\n\n            // dragging lists around\n            if (type === \"list\") {\n                const list = newState.splice(droppableIndexStart, 1);\n                newState.splice(droppableIndexEnd, 0, ...list);\n                return newState;\n            }\n\n            //same list\n            if (droppableIdStart === droppableIdEnd) {\n                const list = state.find(list => droppableIdStart === list.id);\n                const card = list.cards.splice(droppableIndexStart, 1);\n                list.cards.splice(droppableIndexEnd, 0, ...card);\n            }\n\n            //other list\n            if (droppableIdStart !== droppableIdEnd) {\n                // find rhe list where drag happend\n                const listStart = state.find(list => droppableIdStart === list.id);\n\n                // pull out the card\n                const card = listStart.cards.splice(droppableIndexStart, 1);\n\n                // find the list where drag ended\n                const listEnd = state.find(list => droppableIdEnd === list.id);\n\n                //put the card in the new list\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n            }\n\n            return newState;\n        default:\n            return state;\n    }\n};\n\nexport default listsReducer;","import { combineReducers } from \"redux\";\nimport listReducer from \"./listsReducer\";\n\nexport default combineReducers({\n    lists: listReducer\n});","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport './App.css'\n\nconst TrelloCard = ({text, id, index}) => {\n    return (\n        <Draggable draggableId={String(id)} index={index}>\n        {provided => (\n            <div class='card' ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                <Card>\n                    <CardContent>\n                        <Typography gutterBottom>{text}</Typography>\n                    </CardContent>\n                </Card>\n            </div>\n        )}\n        </Draggable>\n    );\n};\n\nexport default TrelloCard;","import React from \"react\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Textarea from \"react-textarea-autosize\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nclass TrelloActionButton extends React.Component {\n    state = {\n        formOpen: false,\n        text: \"\"\n    };\n\n    openForm = () => {\n        this.setState({\n           formOpen: true \n        });\n    };\n\n    closeForm = e => {\n        this.setState({\n            formOpen: false\n        });\n    };\n\n    handleInputChange = e => {\n        this.setState({\n            text: e.target.value\n        });\n    };\n\n    handleAddList = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n\n        if (text) {\n            this.setState({\n                text: \"\"\n            })\n            dispatch(addList(text));\n        }\n\n        return;\n    };\n\n    handleAddCard = () => {\n        const { dispatch, listID } = this.props;\n        const { text } = this.state;\n\n        if (text) {\n            this.setState({\n                text: \"\"\n            })\n            dispatch(addCard(listID, text));\n        }\n\n        return;\n    };\n    \n    renderAddButton = () => {\n        const { list } = this.props;\n\n        const buttonText = list ? \"Add another list\" : \"Add another card\";\n        const buttonTextOpacity = list ? 1 : 0.5;\n        const buttonTextColor = list ? \"white\" : \"inherit\";\n        const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\n\n        return (\n            <div\n                onClick={this.openForm}\n                style={{\n                    ...styles.openFormButtonGroup,\n                    opacity: buttonTextOpacity,\n                    color: buttonTextColor,\n                    backgroundColor: buttonTextBackground\n                }}\n            >\n                <Icon>add</Icon>\n                <p>{buttonText}</p>\n            </div>\n        )\n    };\n\n    renderForm = () => {\n        const { list } = this.props;\n\n        const placeholder = list\n            ? \"Enter list title...\"\n            : \"Enter a title for this card...\";\n        \n        const buttonTitle = list\n            ? \"Add list\"\n            : \"Add Card\";\n\n        const marginLeft = list\n            ? 8\n            : 0;\n\n        return <div>\n            <Card \n                style={{\n                    overflow: \"visible\",\n                    minHeight: 80,\n                    minWidth: 272,\n                    padding: \"6px 8px 2px\",\n                    marginLeft: marginLeft,\n                    marginTop: 8\n                }}\n            >\n                <Textarea \n                    placeholder={placeholder}\n                    autoFocus\n                    onBlur={this.closeForm}\n                    value={this.state.text}\n                    onChange={this.handleInputChange}\n                    style={{\n                        resize: \"none\",\n                        width: \"100%\",\n                        outline: \"none\",\n                        overflow: \"hidden\",\n                        border: \"none\"\n                    }}\n                />\n            </Card>\n            <div style={styles.formButtonGroup}>\n                <Button\n                    onMouseDown={ list ? this.handleAddList : this.handleAddCard }\n                    variant=\"contained\"\n                    style={{color: \"white\", backgroundColor: \"#5aac44\"}}\n                >\n                    {buttonTitle}{\" \"}\n                </Button>\n                <Icon style={{marginLeft: 8, cursor: \"pointer\"}}>close</Icon>\n            </div>\n        </div>;\n    }\n\n    render() {\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n    }\n}\n\nconst styles = {\n    openFormButtonGroup: {\n        display: \"flex\",\n        alignItems: \"center\",\n        cursor: \"pointer\",\n        borderRadius: 3,\n        height: 36,\n        width: 272,\n        marginTop: 8,\n        marginLeft: 8\n    },\n    formButtonGroup: {\n        marginTop: 8,\n        display: \"flex\",\n        alignItems: \"center\"\n    }\n}\n\nexport default connect() (TrelloActionButton);","import React from \"react\";\nimport TrelloCard from \"./TrelloCard\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './App.css'\n\nconst TrelloList = ({title, cards, listID, index}) => {\n    return (\n        <Draggable draggableId={String(listID)} index={index}>\n            {provided => (\n                <div class='list' {...provided.draggableProps} ref={provided.innerRef} {...provided.dragHandleProps}>\n                    <Droppable droppableId={String(listID)}>\n                        {provided => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                <h4>{title}</h4>\n                                { cards.map((card, index) => (\n                                    <TrelloCard key={card.id} index={index} text={card.text} id={card.id} />\n                                ))}\n                                {provided.placeholder}\n                                <TrelloActionButton listID={listID} />\n                            </div>\n                        )}\n                    </Droppable>\n                </div>\n            )}\n        </Draggable>\n    )\n}\n\nexport default TrelloList;","import React, { Component } from \"react\";\nimport TrelloList from \"./TrelloList\";\nimport { connect } from \"react-redux\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"../actions\";\nimport './App.css'\n\nclass App extends Component {\n\n  onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    this.props.dispatch(sort(\n      source.droppableId,\n      destination.droppableId,\n      source.index,\n      destination.index,\n      draggableId,\n      type\n    ))\n  };\n\n  render() {\n\n    const { lists } = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n      <div className=\"App\">\n        <div class='head'>Kanban Board</div>\n        <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n          {provided => (\n            <div class='list-container' {...provided.droppableProps} ref={provided.innerRef}>\n              { lists.map((list, index) => (\n                <TrelloList listID={list.id} key={list.id} title={list.title} cards={list.cards} index={index}/>\n              ))}\n              {provided.placeholder}\n              <TrelloActionButton list />\n            </div>\n          )}\n        </Droppable>\n        <div class='foot'>Kanban Board</div>\n      </div>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n})\n\nexport default connect(mapStateToProps) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\"\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}